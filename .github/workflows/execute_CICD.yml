name: generalized-timeseries CI/CD

# Run workflow on push
on: 
  push:
    branches: [ main, dev ]  # Only run on main and develop branches for pushes

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    # Test on multiple operating systems for better compatibility assurance
    runs-on: ${{ matrix.os }}
    
    strategy:
      # Don't cancel all jobs if one fails - collect all failures
      fail-fast: false
      matrix:
        # Test on multiple Python versions and operating systems
        python-version: ["3.11", "3.13"]
        os: [ubuntu-latest, macos-latest,]  # windows-latest,

    steps:
      # Check out repository code
      - name: Check out repository
        uses: actions/checkout@v4
      
      # Set up Python environment with specified version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # Cache pip dependencies to speed up workflow
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install the package in development mode
          pip install -e ".[dev]"
        shell: bash  # Ensure consistent shell across all OS
      
      # Run code quality checks with flake8
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      # Run tests with pytest and collect coverage data
      - name: Test with pytest and collect coverage
        run: |
          pytest --cov=generalized_timeseries --cov-report=xml --cov-report=term
      
      # Upload coverage report to Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: garthmortensen/generalized-timeseries

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  build:
    name: Build package
    needs: test  # Only build if tests pass
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      # Build both wheel and source distribution
      - name: Build package
        run: |
          python -m build
      
      # Verify package integrity with twine
      - name: Check package with twine
        run: |
          twine check dist/*
      
      # Upload built package as an artifact - updated to v4
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: distributions
          path: dist/
  
  docs:
    name: Build documentation
    needs: test  # Only build docs if tests pass
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[docs]"
      
      # Build documentation with Sphinx
      - name: Build documentation
        run: |
          cd docs
          sphinx-build -b html source build
      
      # Upload built documentation as an artifact - updated to v4
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/build/html/
  
  publish:
    name: Publish to PyPI
    needs: [test, build, docs]
    runs-on: ubuntu-latest
    
    # Add these permissions for PyPI trusted publishing
    permissions:
      id-token: write  # This is required for requesting the JWT
      contents: read   # This is required for actions/checkout
    
    steps:
      - uses: actions/checkout@v4
      
      # Download the built package - updated to v4
      - name: Download package distributions
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: dist/
      
      # Publish to PyPI using GitHub Action with trusted publishing
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verify-metadata: true
          verbose: true
          skip-existing: false
